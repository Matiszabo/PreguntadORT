@{
  ViewData["Title"] = "Fin";
}

<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="../css/Fin.css">
  <link rel="shortcut icon"
    href="https://w7.pngwing.com/pngs/9/393/png-transparent-trivia-crack-no-ads-quiz-logo-game-android-game-smiley-crack-thumbnail.png"
    type="image/x-icon">
  <title>¡Felicidades!</title>
</head>

<body class="container">
    <canvas id="canvas"></canvas>
    <div class="content">
      <h1>¡Felicidades!</h1>
      <p class="username">¡El Usuario @Juego.username Ganó!</p>
      <p class="score">Puntaje Final: <span>@ViewBag.Puntaje</span> puntos</p>
      <p class="message">Has demostrado tu conocimiento. ¡Excelente trabajo!</p>
      <a href='@Url.Action("ConfigurarJuego","Home")' class="play-again">¡Volver a Jugar!</a>
  </div>



  <script>
    let W = window.innerWidth;
    let H = window.innerHeight;
    const canvas = document.getElementById("canvas");
    const context = canvas.getContext("2d");
    const maxConfettis = 150;
    const particles = [];

    const possibleColors = [
      "DodgerBlue",
      "OliveDrab",
      "Gold",
      "Pink",
      "SlateBlue",
      "LightBlue",
      "Gold",
      "Violet",
      "PaleGreen",
      "SteelBlue",
      "SandyBrown",
      "Chocolate",
      "Crimson"
    ];

    function randomFromTo(from, to) {
      return Math.floor(Math.random() * (to - from + 1) + from);
    }

    function confettiParticle() {
      this.x = Math.random() * W; 
      this.y = Math.random() * H - H; 
      this.r = randomFromTo(11, 33); 
      this.d = Math.random() * maxConfettis + 11;
      this.color =
        possibleColors[Math.floor(Math.random() * possibleColors.length)];
      this.tilt = Math.floor(Math.random() * 33) - 11;
      this.tiltAngleIncremental = Math.random() * 0.07 + 0.05;
      this.tiltAngle = 0;

      this.draw = function () {
        context.beginPath();
        context.lineWidth = this.r / 2;
        context.strokeStyle = this.color;
        context.moveTo(this.x + this.tilt + this.r / 3, this.y);
        context.lineTo(this.x + this.tilt, this.y + this.tilt + this.r / 5);
        return context.stroke();
      };
    }

    function Draw() {
      const results = [];

      requestAnimationFrame(Draw);

      context.clearRect(0, 0, W, window.innerHeight);

      for (var i = 0; i < maxConfettis; i++) {
        results.push(particles[i].draw());
      }

      let particle = {};
      let remainingFlakes = 0;
      for (var i = 0; i < maxConfettis; i++) {
        particle = particles[i];

        particle.tiltAngle += particle.tiltAngleIncremental;
        particle.y += (Math.cos(particle.d) + 3 + particle.r / 2) / 2;
        particle.tilt = Math.sin(particle.tiltAngle - i / 3) * 15;

        if (particle.y <= H) remainingFlakes++;

        if (particle.x > W + 30 || particle.x < -30 || particle.y > H) {
          particle.x = Math.random() * W;
          particle.y = -30;
          particle.tilt = Math.floor(Math.random() * 10) - 20;
        }
      }

      return results;
    }

    window.addEventListener(
      "resize",
      function () {
        W = window.innerWidth;
        H = window.innerHeight;
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      },
      false
    );

    for (var i = 0; i < maxConfettis; i++) {
      particles.push(new confettiParticle());
    }

    canvas.width = W;
    canvas.height = H;
    Draw();
  </script>
</body>

</html>